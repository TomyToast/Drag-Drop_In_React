{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","tasks","name","category","bgcolor","onDragStart","e","id","console","log","dataTransfer","setData","onDrop","getData","_this","filter","task","setState","Object","objectSpread","onDragOver","preventDefault","_this2","this","wip","complete","forEach","t","push","react_default","a","createElement","key","draggable","className","style","backgroundColor","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAoFeA,oNA/EbC,MAAQ,CACNC,MAAO,CAAC,CAACC,KAAK,gBACNC,SAAS,MACTC,QAAS,UAEX,CAACF,KAAK,QACJC,SAAS,MACTC,QAAQ,QAEV,CAACF,KAAK,MACJC,SAAS,WACTC,QAAQ,eAGlBC,YAAc,SAACC,EAAGC,GAChBC,QAAQC,IAAI,cAAeF,GAC3BD,EAAEI,aAAaC,QAAQ,aAAcJ,MAGvCK,OAAS,SAACN,EAAGH,GACX,IAAII,EAAKD,EAAEI,aAAaG,QAAQ,QAE5BZ,EAAQa,EAAKd,MAAMC,MAAMc,OAAQ,SAAAC,GAInC,OAHIA,EAAKd,OAASK,IAChBS,EAAKb,SAAWA,GAEXa,IAGTF,EAAKG,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKJ,EAAKd,MADV,CAEEC,cAIJmB,WAAa,SAACd,GACZA,EAAEe,0FAGK,IAAAC,EAAAC,KAEHtB,EAAQ,CAAEuB,IAAK,GACjBC,SAAU,IAcZ,OAXEF,KAAKvB,MAAMC,MAAMyB,QAAS,SAACC,GACzB1B,EAAM0B,EAAExB,UAAUyB,KAAKC,EAAAC,EAAAC,cAAA,OACrBC,IAAKL,EAAEzB,KACPG,YAAa,SAACC,GAAD,OAAKgB,EAAKjB,YAAYC,EAAGqB,EAAEzB,OACxC+B,WAAS,EACTC,UAAU,YACVC,MAAO,CAACC,gBAAiBT,EAAEvB,UAC5BuB,EAAEzB,SAKL2B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAO,SAAA,KACAR,EAAAC,EAAAC,cAAA,MAAIG,UAAU,UAAd,oBACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,MACbd,WAAa,SAAAd,GAAC,OAAIgB,EAAKF,WAAWd,IAClCM,OAAS,SAAAN,GAAOgB,EAAKV,OAAON,EAAG,SAEjCuB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAhB,OACCjC,EAAMuB,KAEPK,EAAAC,EAAAC,cAAA,OAAKG,UAAU,YACbd,WAAa,SAAAd,GAAC,OAAIgB,EAAKF,WAAWd,IAClCM,OAAS,SAAAN,GAAOgB,EAAKV,OAAON,EAAG,cACjCuB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAhB,aACCjC,EAAMwB,mBAzEGa,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0ea1908a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    tasks: [{name:\"Learn Angular\",\n            category:\"wip\",\n            bgcolor: \"yellow\"},\n\n          {name:\"React\",\n            category:\"wip\",\n            bgcolor:\"pink\"},\n        \n          {name:\"Vue\",\n            category:\"complete\",\n            bgcolor:\"skyblue\"}\n  ]}\n\n  onDragStart = (e, id) => {\n    console.log('dragstart: ', id);\n    e.dataTransfer.setData(\"text/plain\", id);  //for IE \"text/plain\" instead \"id\"\n  }\n\n  onDrop = (e, category) => {\n    let id = e.dataTransfer.getData(\"text\");\n\n    let tasks = this.state.tasks.filter( task => {\n      if (task.name === id) {\n        task.category = category;\n      }\n      return task;\n    });\n\n    this.setState({\n      ...this.state,\n      tasks\n    })\n  }\n\n  onDragOver = (e) => {\n    e.preventDefault();\n  }\n\n  render() {\n\n    var tasks = { wip: [], \n      complete: []        \n      }\n\n      this.state.tasks.forEach ((t) => {\n        tasks[t.category].push(<div\n          key={t.name}\n          onDragStart={(e)=>this.onDragStart(e, t.name)}\n          draggable\n          className=\"draggable\"\n          style={{backgroundColor: t.bgcolor}}>\n        {t.name}\n        </div>);\n      });\n\n    return (\n      <>\n      <h2 className=\"header\">DRAG & DROP DEMO</h2>\n      <div className=\"container-drag\">\n        <div className=\"wip\"\n          onDragOver={ e => this.onDragOver(e) }\n          onDrop={ e => { this.onDrop(e, \"wip\") }}\n        >\n        <span className=\"task-header\">WIP</span>\n        {tasks.wip}\n        </div>\n        <div className=\"droppable\"\n          onDragOver={ e => this.onDragOver(e) }\n          onDrop={ e => { this.onDrop(e, \"complete\") }}>\n        <span className=\"task-header\">COMPLETED</span>\n        {tasks.complete}\n        </div>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}